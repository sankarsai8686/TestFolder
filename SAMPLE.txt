# Azure AD SAML Configuration

# Application Base URL
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.entity-id=https://sts.windows.net/f487ab49-f740-447e-8716-de7f5e5c4f60/

# Single Sign-On Service (Azure AD SSO Endpoint)
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-sign-on-service.location=https://login.microsoftonline.com/f487ab49-f740-447e-8716-de7f5e5c4f60/saml2
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-sign-on-service.binding=post

# Relying Party (Your Application's Metadata and Assertion Consumer Service)
spring.security.saml2.relyingparty.registration.azure-ad.entity-id=https://localhost/saml2/metadata
spring.security.saml2.relyingparty.registration.azure-ad.assertion-consumer-service.location=https://localhost:8080/saml/SSO

# Signing Credentials
spring.security.saml2.relyingparty.registration.azure-ad.signing-credentials.location=classpath:keystore.jks
spring.security.saml2.relyingparty.registration.azure-ad.signing-credentials.password=changeit
spring.security.saml2.relyingparty.registration.azure-ad.signing-credentials.alias=alias_name

# Verification Keys (IDP's Public Key for Signature Verification)
spring.security.saml2.relyingparty.registration.azure-ad.verification.credentials.location=classpath:azure-ad-idp.cer

# Optional: Configure Logout (if supported by Azure AD and required for the application)
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-logout-service.location=https://login.microsoftonline.com/f487ab49-f740-447e-8716-de7f5e5c4f60/saml2/logout
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-logout-service.binding=post

# Session Timeout (Optional, Customize as Needed)
server.servlet.session.timeout=30m




# Application's Base URL
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.entity-id=https://sts.windows.net/f487ab49-f740-447e-8716-de7f5e5c4f60/
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-sign-on-service.location=https://login.microsoftonline.com/f487ab49-f740-447e-8716-de7f5e5c4f60/saml2
spring.security.saml2.relyingparty.registration.azure-ad.assertingparty.single-sign-on-service.binding=post

# Relying Party (Your App)
spring.security.saml2.relyingparty.registration.azure-ad.entity-id=https://localhost/saml2/metadata
spring.security.saml2.relyingparty.registration.azure-ad.assertion-consumer-service.location=https://localhost:8080/saml/SSO


@Bean
public Saml2AuthenticationConverter authenticationConverter() {
    return (saml2Response, registration) -> {
        Saml2Authentication authentication = Saml2AuthenticationProvider
                .builder()
                .principalName("displayName") // Replace "displayName" with the attribute key for display name
                .build();
        return authentication;
    };




@GetMapping("/logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
    	System.out.println("logout");// Invalidate the session and clear authentication data
        SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();
        logoutHandler.logout(request, response, null);
        return "redirect:/login";  // Redirect to login page after logout
    }



@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http
	        .csrf(csrf -> csrf
	            .ignoringRequestMatchers("/process-local-login", "/saml2/authenticate/**") // Ignore CSRF for SAML and local login processing
	        )
	        .authorizeRequests(auth -> auth
	            .requestMatchers("/login", "/process-local-login", "/saml2/authenticate/**", "/saml2/service-provider-metadata/**")
	            .permitAll() // Allow access to login and SAML URLs
	            .anyRequest().authenticated() // Secure other pages
	        )
	        .formLogin(form -> form
	            .loginPage("/login") // Custom login page
	            .loginProcessingUrl("/process-local-login") // Form login processing URL
	            .defaultSuccessUrl("/home", true) // Redirect to home after successful login
	            .failureUrl("/login") // Redirect to login page on failure
	        )
	        .saml2Login(saml2 -> saml2
	            .loginProcessingUrl("/saml2/authenticate/azure") // Use custom login URL for SAML authentication
	            .defaultSuccessUrl("/home", true) // Redirect to home after successful SSO login
	            .failureUrl("/saml2/authenticate?registrationId=azure-ad") // Failure URL after SSO login failure
	        )
	        .exceptionHandling(exception -> exception
	            .authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("/login")) // Custom login page entry point
	        )
	        .sessionManagement(session -> session
	            .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) // Only create session if needed
	        ).logout(logout -> logout
	                .logoutUrl("/logout") // Define logout URL
	                .logoutSuccessUrl("/login") // Redirect to custom login page after logout
	                .clearAuthentication(true) // Clear authentication data
	                .invalidateHttpSession(true) // Invalidate the session
	                .deleteCookies("JSESSIONID") // Delete the session cookie
	            );

	    return http.build();
	}



<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Custom Login Page</title>
</head>
<body>
    <h1>Welcome! Please Log In</h1>
    <form action="/process-local-login" method="POST">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <!-- CSRF Token -->
        <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>

        <button type="submit">Login Locally!</button>
    </form>
    <br>
    <a href="/saml2/authenticate/azure">Login with Azure AD</a>
</body>
</html>





@Controller
public class LoginController {

	@PostMapping("/process-local-login")
    public String localLogin(@RequestParam String username, @RequestParam String password, HttpServletRequest request) {
        
    	System.out.println("process-local-login");
    	
    	try {
            //request.login(username, password); // Delegate to Spring Security for authentication
    		System.out.println("username : "+username);
    		System.out.println("password : "+password);
            return "redirect:/home";          // Redirect to the home page on success
        } catch (Exception e) {
            return "redirect:/login?error";  // Redirect to login with error on failure
        }
    }

    @GetMapping("/login")
    public String loginPage() {
    	System.out.println("==================login=====================");
        return "login";                      // Return custom login page
    }

    @GetMapping("/home")
    public String homePage() {
        return "home";                       // Redirect to home page after successful login
    }
    
	/*
	 * @GetMapping("/logout") public String logout() { return "login"; // Redirect
	 * to home page after successful login }
	 */
    
    @GetMapping("/logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
    	System.out.println("logout");// Invalidate the session and clear authentication data
        SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();
        logoutHandler.logout(request, response, null);
        return "redirect:/login";  // Redirect to login page after logout
    }
}

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.saml2=DEBUG
logging.level.org.opensaml=DEBUG

