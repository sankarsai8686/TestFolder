// Batch Insert Policies
    public void savePoliciesBatch(List<Policy> policies) {
        String sql = "INSERT INTO policy (fc_code, year, quarter, column1, column2) VALUES (?, ?, ?, ?, ?)";

        jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Policy pol = policies.get(i);
                ps.setString(1, pol.getFcCode());
                ps.setInt(2, pol.getYear());
                ps.setInt(3, pol.getQuarter());
                ps.setString(4, pol.getColumn1());
                ps.setString(5, pol.getColumn2());
            }

            @Override
            public int getBatchSize() {
                return policies.size();
            }
        });
    }




public void upsertBscGrade(List<Policy> policies) {
        String sql = "MERGE INTO bsc_grade " +
                "USING (SELECT ? AS fc_code, ? AS year, ? AS quarter, ? AS column1) AS source_data " +
                "ON bsc_grade.fc_code = source_data.fc_code " +
                "AND bsc_grade.year = source_data.year " +
                "AND bsc_grade.quarter = source_data.quarter " +
                "WHEN MATCHED THEN UPDATE SET column1 = source_data.column1 " +
                "WHEN NOT MATCHED THEN INSERT (fc_code, year, quarter, column1) " +
                "VALUES (source_data.fc_code, source_data.year, source_data.quarter, source_data.column1);";

        jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Policy pol = policies.get(i);
                ps.setString(1, pol.getFcCode());
                ps.setInt(2, pol.getYear());
                ps.setInt(3, pol.getQuarter());
                ps.setString(4, pol.getColumn1());
            }

            @Override
            public int getBatchSize() {
                return policies.size();
            }
        });
    }


//DB2

 public void upsertBscGrade(List<Policy> policies) {
        String sql = "MERGE INTO bsc_grade AS target " +
                "USING (VALUES (?, ?, ?, ?)) AS source (fc_code, year, quarter, column1) " +
                "ON target.fc_code = source.fc_code " +
                "AND target.year = source.year " +
                "AND target.quarter = source.quarter " +
                "WHEN MATCHED THEN UPDATE SET target.column1 = source.column1 " +
                "WHEN NOT MATCHED THEN INSERT (fc_code, year, quarter, column1) " +
                "VALUES (source.fc_code, source.year, source.quarter, source.column1);";

        jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                Policy pol = policies.get(i);
                ps.setString(1, pol.getFcCode());
                ps.setInt(2, pol.getYear());
                ps.setInt(3, pol.getQuarter());
                ps.setString(4, pol.getColumn1());
            }

            @Override
            public int getBatchSize() {
                return policies.size();
            }
        });
    }


//testing IBM DB2

MERGE INTO bsc_grade AS target
USING (VALUES ('FC123', 2025, 1, 'UpdatedValue')) AS source (fc_code, year, quarter, column1)
ON target.fc_code = source.fc_code 
AND target.year = source.year 
AND target.quarter = source.quarter
WHEN MATCHED THEN 
    UPDATE SET target.column1 = source.column1
WHEN NOT MATCHED THEN 
    INSERT (fc_code, year, quarter, column1) 
    VALUES (source.fc_code, source.year, source.quarter, source.column1);


//Azure SQL SERVER 

MERGE INTO bsc_grade AS target
USING (SELECT 'FC123' AS fc_code, 2025 AS year, 1 AS quarter, 'UpdatedValue' AS column1) AS source
ON target.fc_code = source.fc_code 
AND target.year = source.year 
AND target.quarter = source.quarter
WHEN MATCHED THEN 
    UPDATE SET target.column1 = source.column1
WHEN NOT MATCHED THEN 
    INSERT (fc_code, year, quarter, column1) 
    VALUES (source.fc_code, source.year, source.quarter, source.column1);


--@Transactional
public void upsertBscGrade(List<Policy> policies) {
    String sql = "MERGE INTO bsc_grade AS target " +
                 "USING (VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)) AS source (AD, CREATED_USER, FC_CODE, FC_NAME, GRADE, MODIFIED_USER, QUARTER, UNIT_CODE, YEAR) " +
                 "ON target.FC_CODE = source.FC_CODE AND target.YEAR = source.YEAR AND target.QUARTER = source.QUARTER " +
                 "WHEN MATCHED THEN " +
                 "UPDATE SET target.GRADE = source.GRADE, target.CREATED_USER = source.CREATED_USER, " +
                 "target.FC_NAME = source.FC_NAME, target.MODIFIED_USER = source.MODIFIED_USER " +
                 "WHEN NOT MATCHED THEN " +
                 "INSERT (AD, CREATED_USER, FC_CODE, FC_NAME, GRADE, MODIFIED_USER, QUARTER, UNIT_CODE, YEAR) " +
                 "VALUES (source.AD, source.CREATED_USER, source.FC_CODE, source.FC_NAME, source.GRADE, " +
                 "source.MODIFIED_USER, source.QUARTER, source.UNIT_CODE, source.YEAR);";

    jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() {
        @Override
        public void setValues(PreparedStatement ps, int i) throws SQLException {
            Policy pol = policies.get(i);
            ps.setString(1, pol.getAd());
            ps.setString(2, pol.getCreatedUser());
            ps.setString(3, pol.getFcCode());
            ps.setString(4, pol.getFcName());
            ps.setString(5, pol.getGrade());
            ps.setString(6, pol.getModifiedUser());
            ps.setInt(7, pol.getQuarter());
            ps.setString(8, pol.getUnitCode());
            ps.setInt(9, pol.getYear());
        }

        @Override
        public int getBatchSize() {
            return policies.size();
        }
    });
}



public void upsertBscGrade(List<Policy> policies) {
    // Update existing records
    String updateSql = "UPDATE bsc_grade SET GRADE = ?, CREATED_USER = ?, FC_NAME = ?, MODIFIED_USER = ? " +
                       "WHERE FC_CODE = ? AND YEAR = ? AND QUARTER = ?";

    jdbcTemplate.batchUpdate(updateSql, new BatchPreparedStatementSetter() {
        @Override
        public void setValues(PreparedStatement ps, int i) throws SQLException {
            Policy pol = policies.get(i);
            ps.setString(1, pol.getGrade());
            ps.setString(2, pol.getCreatedUser());
            ps.setString(3, pol.getFcName());
            ps.setString(4, pol.getModifiedUser());
            ps.setString(5, pol.getFcCode());
            ps.setInt(6, pol.getYear());
            ps.setInt(7, pol.getQuarter());
        }

        @Override
        public int getBatchSize() {
            return policies.size();
        }
    });

    // Insert new records that did not exist
    String insertSql = "INSERT INTO bsc_grade (AD, CREATED_USER, FC_CODE, FC_NAME, GRADE, MODIFIED_USER, QUARTER, UNIT_CODE, YEAR) " +
                       "SELECT ?, ?, ?, ?, ?, ?, ?, ?, ? " +
                       "WHERE NOT EXISTS (SELECT 1 FROM bsc_grade WHERE FC_CODE = ? AND YEAR = ? AND QUARTER = ?)";

    jdbcTemplate.batchUpdate(insertSql, new BatchPreparedStatementSetter() {
        @Override
        public void setValues(PreparedStatement ps, int i) throws SQLException {
            Policy pol = policies.get(i);
            ps.setString(1, pol.getAd());
            ps.setString(2, pol.getCreatedUser());
            ps.setString(3, pol.getFcCode());
            ps.setString(4, pol.getFcName());
            ps.setString(5, pol.getGrade());
            ps.setString(6, pol.getModifiedUser());
            ps.setInt(7, pol.getQuarter());
            ps.setString(8, pol.getUnitCode());
            ps.setInt(9, pol.getYear());
            ps.setString(10, pol.getFcCode());
            ps.setInt(11, pol.getYear());
            ps.setInt(12, pol.getQuarter());
        }

        @Override
        public int getBatchSize() {
            return policies.size();
        }
    });
}


import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.stereotype.Component;
import java.io.IOException;

@Component
public class SamlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {
    @Override
    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)
            throws IOException, ServletException {
        System.out.println("SAML Authentication failed: " + exception.getMessage());
        getRedirectStrategy().sendRedirect(request, response, "/login?error=saml");
    }
}
